<plugin id="tutoLoaderExternalDataConfig">
<extension id="tutoLoaderExternalDataConfig" implements="::fwData::Composite">

<!-- The root data object in TutoConfigurations is a ::fwData::Composite. because it has to manage several objects -->
<object id="root" type="::fwData::Composite">
    <!--  a ::fwData::Image. -->
     <object id="tutoLoaderExternalDataImage" type="::fwData::Image">
        <!-- The first service (::gui::action::StarterActionService) is a generic action. In the configuration of this service,
        we specify the id of the services to be started and updated (start and update methods) when user click on the menuItem "Open image".
        In this tutorial, ::gui::action::StarterActionService service starts and updates the service with the uid "myReaderPathFile". -->
        <service uid="action_openFile" name="Open image" type="::gui::action::IAction" implementation="::gui::action::StarterActionService" shortcut="Ctrl+O" autoComChannel="no" >
            <start uid="myReaderPathFile"/>
        </service>
        <service implementation="::uiIO::editor::IOSelectorService" type="::gui::editor::IEditor" uid="myReaderPathFile" autoComChannel="no">
            <type mode="reader" />
        </service>

        <!-- The other service (::gui::action::StarterActionService) is a generic action. In the configuration of this service,
        we specify the id of the services to be started and updated (start and update methods) when user click on the menuItem "save image".
        In this tutorial, ::gui::action::StarterActionService service starts and updates the service with the uid "myWriterPathFile". -->
        <service uid="action_SaveFile" name="Save image" type="::gui::action::IAction" implementation="::gui::action::StarterActionService" shortcut="Ctrl+S" autoComChannel="no" >
            <start uid="myWriterPathFile"/>
        </service>
        <service implementation="::uiIO::editor::IOSelectorService" type="::gui::editor::IEditor" uid="myWriterPathFile" autoComChannel="no">
            <type mode="writer" />
        </service>

        <!-- This service (::vtkSimpleNegato::RendererService) is a 3D visualization service of medical images. -->
        <service implementation="::vtkSimpleNegato::RendererService" type="::fwRender::IRender" uid="myRenderingTuto" autoComChannel="yes" />
        
    </object>
    
     <!-- Graphical user interface manager. The identifier (id) of the container is 900, it's a wxWidgets id.
     In the tag <menus> we specify the identifiers of different services for the different menus.
     In this tutorial, only one service (::gui::aspect::IMenu type) is created. 
     This application have 2 menu one to open/save image and one to load/save extra data.
     There are FW4SPL identifiers. -->

     <service type="::gui::aspect::IAspect" implementation="::gui::aspect::DefaultAspect" autoComChannel="no">
        <name>Tuto07LoaderForExternalData</name>
        <icon>Bundles/Tuto07LoaderForExternalData_0-1/tuto.ico</icon>
        <view uid="myRenderingTuto" autoStart="yes" />
     </service>
     
     <service uid="myMenuBar" type="::gui::aspect::IMenuBar" implementation="::gui::aspect::DefaultMenuBar" autoComChannel="no" >
        <menus>
            <menu uid="menu_File" />
        </menus>
     </service>
     
     <!-- This service define the file menu --> 
     <service name="File" uid="menu_File" type="::gui::aspect::IMenu" implementation="::gui::aspect::DefaultMenu" autoComChannel="no">
       <action uid="action_openFile" />
       <action uid="action_SaveFile" />
       <separator />    
       <action uid="action_quit" />
     </service>
     

     <!-- This service (::gui::action::QuitAction) is a generic action that will close the application when the user click on the menuItem "Quit".
     It's possible to associate with this kind of service (::gui::action::IAction) specific attributes to configure their style, shortcut... 
     (Note: In this tutorial, there is an attribute specialAction with the value "QUIT". On MS Windows, there's no impact.
            But on Mac OS, this value installs the menuItem in the system menu bar,
            and on Linux this value installs the default 'Quit' system icon in the menuItem.)
     The attribute "shortcut" is set with the value "Ctrl+Q" to close the application with this specific shortcut. -->
     <service uid="action_quit" specialAction="QUIT" name="Quit" type="::gui::action::IAction" implementation="::gui::action::QuitAction" shortcut="Ctrl+Q" autoComChannel="no" />

    <!-- Definition of the starting and closing order of the different services. -->
    <start type="::gui::aspect::IAspect" />
    <start type="::gui::aspect::IMenuBar" />
    
    <stop type="::gui::aspect::IMenuBar" />
    <stop type="::gui::aspect::IAspect" />
</object>
</extension>
</plugin>
