<plugin id="TutoConfigurations">
<extension id="tutoDataServiceConfig" implements="::fwData::Image">

    <!-- The root data object in tutoDataService is a ::fwData::Image. -->
    <object id="tutoDataServiceImage" type="::fwData::Image">


        <!-- Graphical user interface manager. The identifier (id) of the container is 900, it's a wxWidgets id.
        In the tag <menus> we specify the identifiers of different services for the different menus.
        In this tutorial, only one service (::gui::aspect::IMenu type) is created,
        since the application's only one menu. The unique identifier (uid) of this service is "menu_file",
        it's an FW4SPL identifier. -->
        <service type="::gui::aspect::IAspect" implementation="::gui::aspect::DefaultAspect" autoComChannel="no">
            <name>tutoDataService</name>
            <icon>Bundles/Tuto03DataService_0-1/tuto.ico</icon>
            <views>
                <view guiContainerId="900" />
            </views>
            <menus>
                <menu uid="menu_File"/>
            </menus>
        </service>

        <!-- The ::gui::aspect::DefaultMenu service creates the menu "File". This menu contains two menuItems (with a separator).
        The actions associated with these two menuItem are identified with the uid "action_openFile" and "action_quit". -->
        <service name="File" uid="menu_File" type="::gui::aspect::IMenu" implementation="::gui::aspect::DefaultMenu" autoComChannel="no" >
            <action uid="action_openFile"/>
            <separator/>
            <action uid="action_quit"/>
        </service>

        <!-- The first service (::gui::action::StarterActionService) is a generic action. In the configuration of this service,
        we specify the id of the services to be started and updated (start and update methods) when user click on the menuItem "OpenFile".
        In this tutorial, ::gui::action::StarterActionService service starts and updates the service with the uid "myReaderPathFile". -->
        <service uid="action_openFile" name="OpenFile" type="::gui::action::IAction" implementation="::gui::action::StarterActionService" shortcut="Ctrl+O" autoComChannel="no" >
            <start uid="myReaderPathFile"/>
        </service>
        <!-- The second service (::gui::action::QuitAction) is a generic action that will close the application
        when the user click on the menuItem "Quit".
        It's possible to associate with this kind of service (::gui::action::IAction) specific attributes to configure their style, shortcut... 
        (Note:
               In this tutorial, there is an attribute specialAction with the value "QUIT". On MS Windows, there's no impact.
               But on Mac OS, this value installs the menuItem in the system menu bar,
               and on Linux this value installs the default 'Quit' system icon in the menuItem.)	
               The attribute "shortcut" is set with the value "Ctrl+Q" to close the application with this specific shortcut. -->
        <service uid="action_quit" specialAction="QUIT"  name="Quit" type="::gui::action::IAction" implementation="::gui::action::QuitAction" shortcut="Ctrl+Q" autoComChannel="no" />


        <!-- The service ::gui::editor::IOSelectorService is started (start and update methods) by the service ::gui::action::StarterActionService. 
        Indeed, the uid of the service ::gui::editor::IOSelectorService is the same as the uid 
        defined in the service configuration ::gui::action::StarterActionService ( "myReaderPathFile").
        This service lists all services available to read a data image and
        it displays a dialog box to select the appropriate service.
        (Note: 
              if there is only one reading service, it's directly selected without dialog box.)
        When the service was chosen, it is started by the ::uiIO::editor::IOSelectorService service. -->
        <service uid="myReaderPathFile" implementation="::uiIO::editor::IOSelectorService" type="::gui::editor::IEditor"  autoComChannel="no" />

        <!-- This service (::vtkSimpleNegato::RendererService) is a 3D visualization service of medical images. -->
        <service implementation="::vtkSimpleNegato::RendererService" type="::fwRender::IRender" uid="myRenderingTuto" autoComChannel="yes" >
            <win guiContainerId="900"/>
        </service>


        <start type="::gui::aspect::IAspect" />
        <start uid="myRenderingTuto"/>						
        
        <stop uid="myRenderingTuto"/>
        <stop type="::gui::aspect::IAspect" />

    </object>

</extension>
</plugin>
