<!--
                 graphical application overview.

  =========================================================
  |                   menuBar                             |
  =========================================================
  |                           |         |     TFEditor    |
  |                           |         |=================|
  |      genericScene1        | negato1 |                 |
  |                           |         | Scene2D_Shutter |
  |                           |         |                 |
  =========================================================
  |                           |         |                 |
  |      genericScene2        |         |                 |
  |                           | negato2 |     Scene2D     |
  |===========================|         |================ |
  | multiView_scene1_bottom   |         |  windowLevel    |
  =========================================================
Comment: Name inside the drawing are the uid of the service defined below.

 This application allows to load an medical image and displays it:
  - The genericscene1 displays the image with volume rendering by using the transfert function defined in TFEditor.
  - The negato1 displays the image with a 2D multi-planar rendering by using the transfert function defined in TFEditor.

  - The genericscene2 displays the image with a 3D multi-planar rendering by using the default transfert function (CT-GreyLevel).
  - The negato2 displays the image with a 2D multi-planar rendering by using the default transfert function (CT-GreyLevel).

 It also displays in Scene2D_Shutter the transfert funtion selected in TFEditor. Scene2D displays a range of the transfert function defined
 by the gray range in Scene2D_Shutter.

 -->

<plugin id="Ex01VolumeRendering">

    <requirement id="servicesReg" />

    <extension implements="::fwServices::registry::AppConfig">
        <id>Ex01VolumeRendering</id>
        <type>parameters</type>
        <config>

            <object type="::fwData::Composite">   <!--  Root object of the application -->

                <!--  Service entrance point for interface creation -->
                <service uid="IHM" impl="::gui::frame::DefaultFrame" type="::fwGui::IFrameSrv" autoConnect="no">
                    <gui>
                        <frame>
                            <name>Ex01VolumeRendering</name>
                            <icon>Bundles/Ex01VolumeRendering_0-1/tuto.ico</icon>
                        </frame>
                        <menuBar />
                    </gui>
                    <registry>
                        <menuBar sid="menuBar" start="yes" />
                        <view sid="multiView" start="yes" />
                    </registry>
                </service>
                <service uid="menuBar" type="::fwGui::IMenuBarSrv" impl="::gui::aspect::DefaultMenuBarSrv" autoConnect="no" >
                    <gui>
                        <layout>
                            <menu name="File" />
                        </layout>
                    </gui>
                    <registry>
                        <menu sid="menu_File" start="yes" />
                    </registry>
                </service>

                <service uid="menu_File" type="::fwGui::IMenuSrv" impl="::gui::aspect::DefaultMenuSrv" autoConnect="no" >
                    <gui>
                        <layout>
                            <menuItem name="Open file" shortcut="Ctrl+O" />
                            <menuItem name="Save file" shortcut="Ctrl+S" />
                            <separator />
                            <menuItem name="Quit" specialAction="QUIT" shortcut="Ctrl+Q" />
                        </layout>
                    </gui>
                    <registry>
                        <menuItem sid="action_openFile" start="yes" />
                        <menuItem sid="action_saveFile" start="yes" />
                        <menuItem sid="action_quit" start="yes" />
                    </registry>
                </service>

                <service uid="action_openFile" type="::fwGui::IActionSrv" impl="::gui::action::StarterActionService" autoConnect="no">
                    <start uid="readerPathFile" />
                </service>

                <service uid="action_saveFile" type="::fwGui::IActionSrv" impl="::gui::action::StarterActionService" autoConnect="no">
                    <start uid="writerPathFile" />
                </service>

                <service uid="action_quit" type="::fwGui::IActionSrv" impl="::gui::action::QuitAction" autoConnect="no" />

                <service uid="multiView" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no" >
                    <gui>
                        <layout type="::fwGui::CardinalLayoutManager" >
                            <view align="center"  />
                            <view align="right" caption="Parameters" minWidth="400" />
                        </layout>
                    </gui>
                    <registry>
                        <view sid="leftMultiView" start="yes" />
                        <view sid="rightMultiView" start="yes" />
                    </registry>
                </service>

                <service uid="leftMultiView" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no" >
                    <gui>
                        <layout type="::fwGui::LineLayoutManager" >
                            <orientation value="vertical" />
                            <view proportion ="1" />
                            <view proportion ="1" />
                        </layout>
                    </gui>
                    <registry>
                        <view sid="leftUpperMultiView" start="yes" />
                        <view sid="leftBottomMultiView" start="yes" />
                    </registry>
                </service>

                <service uid="leftUpperMultiView" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no" >
                    <gui>
                        <layout type="::fwGui::LineLayoutManager" >
                            <orientation value="horizontal" />
                            <view proportion ="1" caption="Volume rendering" />
                            <view proportion ="1" caption="Negato 1" />
                        </layout>
                    </gui>
                    <registry>
                        <view sid="genericScene1" start="yes" />
                        <view sid="negato1" start="yes" />
                    </registry>
                </service>

                <service uid="leftBottomMultiView" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no" >
                    <gui>
                        <layout type="::fwGui::LineLayoutManager" >
                            <orientation value="horizontal" />
                            <view proportion ="1" caption="Negato 3D" />
                            <view proportion ="1" caption="Negato 2"/>
                        </layout>
                    </gui>
                    <registry>
                        <view sid="multiView_scene1" start="yes" />
                        <view sid="negato2" start="yes" />
                    </registry>
                </service>

                <service uid="multiView_scene1" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no" >
                    <gui>
                        <layout type="::fwGui::CardinalLayoutManager" >
                            <view align="center" />
                            <view align="bottom" minWidth="200" minHeight="30" resizable="no" />
                        </layout>
                    </gui>
                    <registry>
                        <view sid="genericScene2" start="yes" />
                        <view sid="multiView_scene1_bottom" start="yes" />
                    </registry>
                </service>
                <service uid="multiView_scene1_bottom" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no">
                    <gui>
                        <layout type="::fwGui::LineLayoutManager" >
                            <orientation value="horizontal" />
                            <view proportion="0" minWidth="30" />
                            <view proportion="0" minWidth="50" />
                            <view proportion="1" />
                        </layout>
                    </gui>
                    <registry>
                        <view sid="sliceListEditor" start="no" />
                        <view sid="showScanEditor" start="no" />
                        <view sid="sliderIndexEditor" start="no" />
                    </registry>
                </service>

                <service uid="rightMultiView" type="::gui::view::IView" impl="::gui::view::DefaultView" autoConnect="no" >
                    <gui>
                        <layout type="::fwGui::LineLayoutManager" >
                            <orientation value="vertical" />
                            <view proportion ="0" />
                            <view proportion="0" />
                            <view proportion="0" />
                            <view proportion ="0" />
                        </layout>

                    </gui>
                    <registry>
                        <view sid="TFEditor" start="no" />
                        <view sid="Scene2D_Shutter" start="yes" />
                        <view sid="Scene2D" start="yes" />
                        <view sid="windowLevel" start="no" />
                    </registry>
                </service>

                <item key="image">
                    <object uid="imageUID" type="::fwData::Image">

                        <service uid="readerPathFile" impl="::uiIO::editor::IOSelectorService" type="::gui::editor::IDialogEditor" autoConnect="no">
                            <type mode="reader" />
                        </service>

                        <service uid="writerPathFile" impl="::uiIO::editor::IOSelectorService" type="::gui::editor::IDialogEditor" autoConnect="no">
                            <type mode="writer" />
                        </service>

                    </object>
                </item>

                <!-- Composite to store selected TF -->
                <item key="TFSelectionsKey">
                    <object uid="TFSelections" type="::fwData::Composite" >

                    </object>
                </item>

                <item key="compositeVisu">
                    <object uid="compositeVisu" type="::fwData::Composite">

                        <service uid="updaterUID" impl="::ctrlSelection::updater::ObjFromMsgUpdaterSrv" type="::ctrlSelection::IUpdaterSrv" autoConnect="no">
                            <update compositeKey="image" onEvent="NEW_IMAGE" fromUID="imageUID" actionType="ADD_OR_SWAP"/>
                        </service>

                        <!-- Manager to start/stop/swap services when  image is added/deleted/swapped -->
                        <service uid="manager" impl="::ctrlSelection::manager::SwapperSrv" type="::ctrlSelection::IManagerSrv" autoConnect="yes" >
                            <mode type="stop" />  <!-- manager stops all the services in its config when image desappears (and associated com channel if necessary) -->
                            <config>
                                <object id="image" type="::fwData::Image">

                                    <!-- This service convert a simple fwData::Image to medical Image -->
                                    <service  impl="::ctrlSelection::MedicalImageSrv" type="::fwServices::IController"  autoConnect="no" />

                                    <service uid="windowLevel" impl="::uiImage::WindowLevel" type="::gui::editor::IEditor" autoConnect="yes">
                                        <config selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                    </service>

                                    <service uid="sliceListEditor" type="::gui::editor::IEditor" impl="::uiImage::SliceListEditor" autoConnect="yes">
                                        <negatoAdaptor uid="MPRNegatoScene3D" slices="3" />
                                    </service>

                                    <service uid="showScanEditor" type="::gui::editor::IEditor" impl="::uiImage::ShowScanEditor" autoConnect="no">
                                        <negatoAdaptor uid="MPRNegatoScene3D" />
                                    </service>

                                    <service uid="sliderIndexEditor" type="::gui::editor::IEditor" impl="::uiImage::SliceIndexPositionEditor" autoConnect="yes" >
                                        <sliceIndex>axial</sliceIndex>
                                    </service>

                                    <!-- This manager adds/removes a field (m_transferFunctionCompositeId) on Image (image) -->
                                    <service impl="::ctrlSelection::manager::SField" type="::ctrlSelection::IManagerSrv" autoConnect="yes" >
                                        <mode type="stop" />
                                        <config>
                                            <field id="m_transferFunctionCompositeId" type="::fwData::Composite">
                                                <service uid="TFEditor" type="::gui::editor::IEditor" impl="::uiTF::TransferFunctionEditor" autoConnect="yes">
                                                    <config selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                                </service>
                                            </field>
                                        </config>
                                    </service>
                                </object>

                            </config>
                        </service>

                        <!-- Comment: This generic scene (genericScene1) uses the transfert function stores with key = SelectedTF in TFSelections -->
                        <service uid="genericScene1" impl="::fwRenderVTK::VtkRenderService" type="::fwRender::IRender" autoConnect="yes">
                            <scene>
                                <picker id="picker" vtkclass="fwVtkCellPicker" />

                                <renderer id="default" background="0.0" />
                                <adaptor id="renderAdaptor" class="::visuVTKAdaptor::Render" objectId="self">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <adaptor id="acquisitionAdaptor" class="::visuVTKAdaptor::Acquisition" objectId="acquisition">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <!-- Adaptor to visualize the medical image (image) with volume rendering. -->
                                <adaptor id="vRAdaptor" class="::visuVTKVRAdaptor::Volume" objectId="image">
                                    <config renderer="default" selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                </adaptor>

                                <adaptor id="ImageText" class="::visuVTKAdaptor::ImageText" objectId="image">
                                    <config renderer="default" picker="picker" text="" color="#FFFFFF" selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                </adaptor>

                            </scene>
                        </service>

                        <!-- Comment: This generic scene (genericScene2) uses the default transfert function (CT-GreyLevel) -->
                        <service uid="genericScene2" impl="::fwRenderVTK::VtkRenderService" type="::fwRender::IRender" autoConnect="yes">
                            <scene>
                                <picker id="picker" vtkclass="fwVtkCellPicker" />

                                <renderer id="default" background="0.0" />
                                <adaptor id="renderAdaptor" class="::visuVTKAdaptor::Render" objectId="self">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <adaptor id="acquisitionAdaptor" class="::visuVTKAdaptor::Acquisition" objectId="acquisition">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <!-- Adaptor to visualize the medical image (image) in a 3D multi-planar rendering -->
                                <adaptor id="MPRNegato3D" class="::visuVTKAdaptor::NegatoMPR" objectId="image">
                                    <config renderer="default" picker="picker" mode="3D" slices="3" sliceIndex="axial" />
                                </adaptor>

                                <adaptor id="ImageText" class="::visuVTKAdaptor::ImageText" objectId="image">
                                    <config renderer="default" picker="picker" text="" color="#FFFFFF" />
                                </adaptor>

                                <adaptor id="cameraScene3DID" class="::visuVTKAdaptor::Medical3DCamera" objectId="image">
                                    <config renderer="default" sliceIndex="axial" />
                                </adaptor>

                            </scene>
                        </service>

                        <!-- Comment: This negato (negato1) uses the transfert function stores with key = SelectedTF in TFSelections -->
                        <service uid="negato1" impl="::fwRenderVTK::VtkRenderService" type="::fwRender::IRender" autoConnect="yes">
                            <scene>
                                <picker id="picker" vtkclass="fwVtkCellPicker" />

                                <renderer id="default" background="0.0" />
                                <adaptor id="renderAdaptor" class="::visuVTKAdaptor::Render" objectId="self">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <adaptor id="acquisitionAdaptor" class="::visuVTKAdaptor::Acquisition" objectId="acquisition">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <adaptor id="Interactor4Negato" class="::visuVTKAdaptor::InteractorStyle" objectId="self">
                                    <config renderer="default" style="InteractorStyle2DForNegato" />
                                </adaptor>

                                <adaptor id="MPRNegato2D" class="::visuVTKAdaptor::NegatoMPR" objectId="image">
                                    <config renderer="default" picker="picker" mode="2d" slices="1" sliceIndex="axial" selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                </adaptor>

                                <adaptor id="ImageText" class="::visuVTKAdaptor::ImageText" objectId="image">
                                    <config renderer="default" picker="picker" text="" color="#FFFFFF" selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                </adaptor>

                            </scene>
                        </service>

                        <!-- Comment : This negato (negato2) uses the default transfert function (CT-GreyLevel) -->
                        <service uid="negato2" impl="::fwRenderVTK::VtkRenderService" type="::fwRender::IRender" autoConnect="yes">
                            <scene>
                                <picker id="picker" vtkclass="fwVtkCellPicker" />

                                <renderer id="default" background="0.0" />
                                <adaptor id="renderAdaptor" class="::visuVTKAdaptor::Render" objectId="self">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <adaptor id="acquisitionAdaptor" class="::visuVTKAdaptor::Acquisition" objectId="acquisition">
                                    <config renderer="default" picker="" />
                                </adaptor>

                                <adaptor id="Interactor4Negato" class="::visuVTKAdaptor::InteractorStyle" objectId="self">
                                    <config renderer="default" style="InteractorStyle2DForNegato" />
                                </adaptor>

                                <adaptor id="MPRNegato2D" class="::visuVTKAdaptor::NegatoMPR" objectId="image">
                                    <config renderer="default" picker="picker" mode="2d" slices="1" sliceIndex="axial" />
                                </adaptor>

                                <adaptor id="ImageText" class="::visuVTKAdaptor::ImageText" objectId="image">
                                    <config renderer="default" picker="picker" text="" color="#FFFFFF" />
                                </adaptor>

                            </scene>
                        </service>


                        <!-- Declaration of the 2D scene service uses to create the TF editor which draw the range of transfert function define by the Scene2D_Shutter -->
                        <service uid="Scene2D" impl="::scene2D::Render" type="::fwRender::IRender" autoConnect="yes">

                            <scene>

                                <scene x="-1100" y="-1.1" width="2100" height="1.2" antialiasing="true" />

                                <viewport id="view1" x="-500" y="-1.1" width="500" height="1.2" />

                                <axis id="xAxis" origin="0.0" scale="1.0" scaleType="LINEAR" />
                                <axis id="yAxis" origin="0.0" scale="-1.0" scaleType="LINEAR" />
                                <axis id="axeHistogramY" origin="0.0" scale="-0.0000025" scaleType="LINEAR" />

                                <adaptor id="grid1" class="::scene2D::adaptor::Grid2D" objectId="self">
                                    <config xMin="-1000" xMax="1000" yMin="0" yMax="1" xSpacing="100" ySpacing="0.1" opacity="0.4" viewportUID="Viewport" color="lightGray" xAxis="xAxis"
                                        yAxis="yAxis" zValue="2" />
                                </adaptor>

                                <adaptor id="tf2" class="::scene2D::adaptor::TransferFunction" objectId="image">
                                    <config lineColor="lightGray" circleColor="lightGray" xAxis="xAxis" 
                                        yAxis="yAxis" zValue="5" pointSize="12" viewportUID="Viewport" 
                                        selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                </adaptor>

                                <adaptor id="axisLeft" class="::scene2D::adaptor::Axis" objectId="self">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="4" color="cyan" unit="%" align="left" min="0" max="1" step="0.1" viewportUID="Viewport" />
                                </adaptor>

                                <adaptor id="scaleValuesBottom" class="::scene2D::adaptor::ScaleValues" objectId="self">
                                    <config min="-900" max="1500" interval="100" fontSize="6" align="bottom" unit="Hfd." viewportUID="Viewport" color="darkGray" xAxis="xAxis" yAxis="yAxis"
                                        zValue="10" />
                                </adaptor>

                                <adaptor id="scaleValuesLeft" class="::scene2D::adaptor::ScaleValues" objectId="self">
                                    <config min="0.0" max="1.0" interval="0.1" fontSize="6" align="left" unit="%" viewportUID="Viewport" color="cyan" xAxis="xAxis" yAxis="yAxis" zValue="10" />
                                </adaptor>

                                <adaptor id="scaleValuesTop" class="::scene2D::adaptor::ScaleValues" objectId="self">
                                    <config min="-900" max="1500" interval="100" fontSize="6" align="top" unit="Hfd." viewportUID="Viewport" color="red" xAxis="xAxis" yAxis="yAxis" zValue="10" />
                                </adaptor>

                                <adaptor id="scaleValuesRight" class="::scene2D::adaptor::ScaleValues" objectId="self">
                                    <config min="0.0" max="1.0" interval="0.1" fontSize="6" align="right" unit="%" viewportUID="Viewport" color="yellow" xAxis="xAxis" yAxis="yAxis" zValue="10" />
                                </adaptor>

                                <adaptor id="axisTestBottom" class="::scene2D::adaptor::Axis" objectId="self">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="11" min="-900.0" max="1500" align="bottom" color="red" tickSize="5" interval="100" viewportUID="Viewport" />
                                </adaptor>

                                <adaptor id="axisTestTop" class="::scene2D::adaptor::Axis" objectId="self">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="11" min="-900.0" max="1500" align="top" color="green" tickSize="5" interval="100" viewportUID="Viewport" />
                                </adaptor>

                                <adaptor id="axisTestLeft" class="::scene2D::adaptor::Axis" objectId="self">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="11" min="0" max="1.0" align="left" color="cyan" tickSize="5" interval="0.1" viewportUID="Viewport" />
                                </adaptor>

                                <adaptor id="axisTestRight" class="::scene2D::adaptor::Axis" objectId="self">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="12" min="0" max="1.0" align="right" color="yellow" tickSize="5" interval="0.1" viewportUID="Viewport" />
                                </adaptor>

                                <adaptor id="viewportUpdater" class="::scene2D::adaptor::ViewportUpdater" objectId="viewport">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="9" />
                                </adaptor>

                            </scene>

                        </service>

                        <!-- Declaration of the shutter service uses to focus a range of the transfert function which will be draw by the Scene2D service. -->
                        <service uid="Scene2D_Shutter" impl="::scene2D::Render" type="::fwRender::IRender" autoConnect="yes">
                            <scene>

                                <scene x="-1100" y="-1.1" width="2100" height="1.2" />
                                <viewport id="view1" x="-1100" y="-1.1" width="2100" height="1.2" />

                                <axis id="xAxis" origin="0.0" scale="1.0" scaleType="LINEAR" />
                                <axis id="yAxis" origin="0.0" scale="-1.0" scaleType="LINEAR" />

                                <adaptor id="grid1" class="::scene2D::adaptor::Grid2D" objectId="self">
                                    <config xMin="-1100" xMax="3000" yMin="0.1" yMax="1.7" xSpacing="500" ySpacing="0.2" viewportUID="Viewport" color="lightGray" xAxis="xAxis" yAxis="yAxis"
                                        zValue="1" />
                                </adaptor>

                                <axis id="axeHistogramY" origin="0.0" scale="-0.000005" scaleType="LINEAR" />

                                <adaptor id="tf2" class="::scene2D::adaptor::TransferFunction" objectId="image">
                                    <config lineColor="lightGray" circleColor="lightGray" xAxis="xAxis" 
                                        yAxis="yAxis" zValue="5" pointSize="12" viewportUID="Viewport"
                                        selectedTFKey="SelectedTF" tfSelectionFwID="TFSelections" />
                                </adaptor>

                                <adaptor id="viewportRangeSelector" class="::scene2D::adaptor::ViewportRangeSelector" objectId="viewport">
                                    <config xAxis="xAxis" yAxis="yAxis" zValue="3" initialWidth="1000" initialPos="-100" />
                                </adaptor>
                            </scene>
                        </service>

                        <item key="viewport">
                            <object uid="Viewport" type="::scene2D::data::Viewport" />
                        </item>

                        <proxy channel="UPDATER_CHANNEL" >
                            <signal>imageUID/objectModified</signal>
                            <slot>updaterUID/receive</slot>
                        </proxy>

                    </object>
                </item>

                <start uid="IHM" />
                <start uid="updaterUID" />
                <start uid="manager" />

            </object>

        </config>
    </extension>

</plugin>
