/* ***** BEGIN LICENSE BLOCK *****
 * FW4SPL - Copyright (C) IRCAD, 2009-2012.
 * Distributed under the terms of the GNU Lesser General Public License (LGPL) as
 * published by the Free Software Foundation.
 * ****** END LICENSE BLOCK ****** */
#ifndef __FWCOM_SLOTRUN_HXX__
#define __FWCOM_SLOTRUN_HXX__

#ifndef __FWCOM_SLOTRUN_HPP__
#error fwCom/SlotRun.hpp not included
#endif

#include <fwThread/TaskHandler.hpp>

#include "fwCom/exception/NoWorker.hpp"

#include "fwCom/util/WeakCall.hpp"

#include "fwCom/SlotBase.hxx"

namespace fwCom
{

template< typename ... A >
inline ::boost::function< void() > SlotRun< void (A...) >::bindRun( A...args  ) const
{
    return ::boost::bind( ( void (SelfType::*)( A... ) const ) &SelfType::run, this, args... );
}

template< typename ... A >
inline
SlotBase::VoidSharedFutureType
SlotRun< void (A...) >::asyncRun( const ::fwThread::Worker::sptr &worker, A... args ) const
{
    if(!worker)
    {
        throw ::fwCom::exception::NoWorker("Slot has no worker set.");
    }
    ::boost::packaged_task<void>   task(::fwCom::util::weakcall( this->shared_from_this(), this->bindRun( args... ) ));
    ::boost::unique_future< void > ufuture = task.get_future();
    ::boost::function< void () >   f = ::fwThread::moveTaskIntoFunction(task);
    worker->post(f);

    return ::boost::move(ufuture);
}

template< typename ... A >
inline SlotBase::VoidSharedFutureType SlotRun< void (A...) >::asyncRun(A... args) const
{
    SlotBase::VoidSharedFutureType ufuture;
    ufuture = this->asyncRun(m_worker, args...);
    return ufuture;

}


} // namespace fwCom

#endif /* __FWCOM_SLOTRUN_HXX__ */




